{"ast":null,"code":"var _jsxFileName = \"/Users/axelholmqvist/Developer/axelholmqvist-se/src/pages/Landing/Landing.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport \"./Landing.scss\";\nimport * as THREE from \"three\";\nimport Hero from \"../../components/Hero/Hero\";\nimport Page from '../../components/Page/Page';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Landing() {\n  _s();\n\n  const refContainer = useRef(null);\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.src = \"../../assets/scripts/perlin\";\n    script.async = true;\n    document.body.appendChild(script);\n    var renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true\n    });\n    refContainer.current.appendChild(renderer.domElement); // default bg canvas color //\n\n    renderer.setClearColor(0x7b7b7b); //  use device aspect ratio //\n\n    renderer.setPixelRatio(window.devicePixelRatio); // set size of canvas within window //\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n    var sphere_geometry = new THREE.SphereGeometry(1, 128, 128);\n    var material = new THREE.MeshNormalMaterial();\n    var sphere = new THREE.Mesh(sphere_geometry, material);\n    scene.add(sphere);\n\n    var update = function () {\n      // change '0.003' for more aggressive animation\n      var time = performance.now() * 0.003; //console.log(time)\n      //go through vertices here and reposition them\n      // change 'k' value for more spikes\n\n      var k = 1;\n\n      for (var i = 0; i < sphere.geometry.vertices.length; i++) {\n        var p = sphere.geometry.vertices[i];\n        p.normalize().multiplyScalar(1 + 0.3 * noise.perlin3(p.x * k + time, p.y * k, p.z * k));\n      }\n\n      sphere.geometry.computeVertexNormals();\n      sphere.geometry.normalsNeedUpdate = true;\n      sphere.geometry.verticesNeedUpdate = true;\n    };\n\n    function animate() {\n      //sphere.rotation.x += 0.01;\n      //sphere.rotation.y += 0.01;\n      update();\n      /* render scene and camera */\n\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    }\n\n    requestAnimationFrame(animate);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: /*#__PURE__*/_jsxDEV(Hero, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: refContainer,\n        className: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Landing, \"PGRU+J3oZAAOdg9sBlM5QzF2boo=\");\n\n_c = Landing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Landing\");","map":{"version":3,"sources":["/Users/axelholmqvist/Developer/axelholmqvist-se/src/pages/Landing/Landing.js"],"names":["React","useEffect","useRef","THREE","Hero","Page","Landing","refContainer","script","document","createElement","src","async","body","appendChild","renderer","WebGLRenderer","alpha","antialias","current","domElement","setClearColor","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","scene","Scene","camera","PerspectiveCamera","position","z","sphere_geometry","SphereGeometry","material","MeshNormalMaterial","sphere","Mesh","add","update","time","performance","now","k","i","geometry","vertices","length","p","normalize","multiplyScalar","noise","perlin3","x","y","computeVertexNormals","normalsNeedUpdate","verticesNeedUpdate","animate","render","requestAnimationFrame"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport \"./Landing.scss\";\n\nimport * as THREE from \"three\";\n\nimport Hero from \"../../components/Hero/Hero\";\nimport Page from '../../components/Page/Page';\n\nexport default function Landing() {\n\n  const refContainer = useRef(null);\n\n  useEffect(() => {\n\n    const script = document.createElement(\"script\");\n    script.src = \"../../assets/scripts/perlin\";\n    script.async = true;\n    document.body.appendChild(script);\n    \n    var renderer = new THREE.WebGLRenderer({ alpha: true, antialias:true});\n    \n    refContainer.current.appendChild( renderer.domElement );\n    \n    // default bg canvas color //\n    renderer.setClearColor(0x7b7b7b);\n    //  use device aspect ratio //\n    renderer.setPixelRatio(window.devicePixelRatio);\n    // set size of canvas within window //\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n\n\n\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera( 45, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    camera.position.z = 5;\n\n\n    var sphere_geometry = new THREE.SphereGeometry(1, 128, 128);\n    var material = new THREE.MeshNormalMaterial();\n\n    var sphere = new THREE.Mesh(sphere_geometry, material);\n    scene.add(sphere);\n\n\n    var update = function() {\n\n      // change '0.003' for more aggressive animation\n      var time = performance.now() * 0.003;\n      //console.log(time)\n\n      //go through vertices here and reposition them\n      \n      // change 'k' value for more spikes\n      var k = 1;\n      for (var i = 0; i < sphere.geometry.vertices.length; i++) {\n          var p = sphere.geometry.vertices[i];\n          p.normalize().multiplyScalar(1 + 0.3 * noise.perlin3(p.x * k + time, p.y * k, p.z * k));\n      }\n      sphere.geometry.computeVertexNormals();\n      sphere.geometry.normalsNeedUpdate = true;\n      sphere.geometry.verticesNeedUpdate = true;\n\n\n    }\n\n    function animate() {\n      //sphere.rotation.x += 0.01;\n      //sphere.rotation.y += 0.01;\n\n      update();\n      /* render scene and camera */\n      renderer.render(scene,camera);\n      requestAnimationFrame(animate);\n    }\n\n\n    requestAnimationFrame(animate);\n  }, []);\n\n  return (\n    <Page>\n        <Hero>\n            <div ref={refContainer} className=\"\"/>\n        </Hero>\n    </Page>\n  );\n}"]},"metadata":{},"sourceType":"module"}